A. Разворот строки

В некоторых языках предложения пишутся и читаются не слева направо, а справа налево.
Вам под руку попался странный текст –— в нём обычный (слева направо) порядок букв в словах. А вот сами слова идут в
противоположном направлении. Вам надо преобразовать текст так, чтобы слова в нём были написаны слева направо.

B. Пограничный контроль

Представьте, что вы работаете пограничником и постоянно проверяете документы людей по записи из базы. При этом допустима
ситуация, когда имя человека в базе отличается от имени в паспорте на одну замену, одно удаление или одну вставку символа.
Если один вариант имени может быть получен из другого удалением одного символа, то человека пропустят через границу.
А вот если есть какое-либо второе изменение, то человек грустно поедет домой или в посольство.
Напишите программу, которая сравнивает имя в базе с именем в паспорте и решает, пропускать человека или нет. В случае
равенства двух строк — путешественника, естественно, пропускают.

C. Самый длинный палиндром 2

Палиндром —– это строка, которая одинаково читается как слева направо, так и справа налево.
Из данной строки s путём удаления и перестановки букв надо получить палиндром максимальной длины. Среди всех таких
палиндромов надо получить лексикографически минимальный. Количество удалений и перестановок символов может быть любым.

D. Общий префикс

Найдите наибольший по длине общий префикс нескольких строк.

F. Частое слово

Дан набор слов, слова могут повторяться. Среди них надо найти самое частое слово. Если таких слов несколько,
то выведите лексикографически наименьшее.

G. Поиск со сдвигом

Гоша измерял температуру воздуха n дней подряд. В результате у него получился некоторый временной ряд. Теперь он хочет
посмотреть, как часто встречается некоторый шаблон в получившейся последовательности. Однако температура —
вещь относительная, поэтому Гоша решил, что при поиске шаблона длины m (a1, a2, ..., am) стоит также рассматривать
сдвинутые на константу вхождения. Это значит, что если для некоторого числа c в исходной последовательности нашёлся участок
вида (a1 + c, a2 + c, ... , am + c), то он тоже считается вхождением шаблона (a1, a2, ..., am).
По заданной последовательности измерений X и шаблону A=(a1, a2, ..., am) определите все вхождения A в X,
допускающие сдвиг на константу.

H. Глобальная замена

Напишите программу, которая будет заменять в тексте все вхождения строки s на строку t. Гарантируется, что никакие два
вхождения шаблона s не пересекаются друг с другом.

I. Повтор

Будем говорить, что строка s является повтором длины k, если существует такая строка t, что s = t * k, где под умножением
подразумевается конкатенация k экземпляров строки t один за другим.
Например, строка abababab является повтором строки abab длины 2, а также повторением строки ab длины 4. Тогда имеет
смысл говорить о наибольшем повторе. Строка является наибольшим повтором длины k, если она является повтором некоторой
строки длины k и если не существует такой строки t, что s —– повтор t длины m > k. Например, строка aaaa является
наибольшим повтором длины 4.
Вам дана строка, которая является наибольшим повтором длины x. Найдите x.

J. Случай верблюда

В некоторых IDE поддерживается навигация по файлам через их сокращённые названия. Если в языке принято называть классы
CamelCase'ом (как в Java, например), то по заглавным буквам названия можно быстро найти нужный класс. Например,
если название класса «MyFavouriteConfigurableScannerFactory», то его можно найти по строке «MFCSF». Но если в проекте
есть класс «theMultiFunctionalCommaSeparatedFile», то он тоже будет подходить под этот паттерн, и при поиске надо
будет выбрать между этими двумя вариантами.

Вам дан набор строк в CamelCase. Далее будут поступать запросы в виде строк-паттернов из прописных букв английского алфавита.
Вам надо находить такие строки среди исходных, которые удовлетворяют заданному шаблону, и выводить их в лексикографическом порядке.

K. Сравнить две строки

Алла придумала новый способ сравнивать две строки: чтобы сравнить строки a и b, в них надо оставить только те буквы,
которые в английском алфавите стоят на четных позициях. Затем полученные строки сравниваются по обычным правилам.
Помогите Алле реализовать новое сравнение строк.

L. Подсчёт префикс-функции

В этой задаче вам необходимо посчитать префикс-функцию для заданной строки.

A. Packed Prefix

Вам даны строки в запакованном виде. Определим запакованную строку (ЗС) рекурсивно. Строка, состоящая только из строчных
букв английского алфавита является ЗС. Если A и B —– корректные ЗС, то и AB является ЗС. Если A —– ЗС, а
n — однозначное натуральное число, то n[A] тоже ЗС. При этом запись n[A] означает, что при распаковке строка A
записывается подряд n раз. Найдите наибольший общий префикс распакованных строк и выведите его (в распакованном виде).

B. Шпаргалка

Вася готовится к экзамену по алгоритмам и на всякий случай пишет шпаргалки.

Чтобы уместить на них как можно больше информации, он не разделяет слова пробелами. В итоге получается одна очень
длинная строка. Чтобы на самом экзамене из-за нервов не запутаться в прочитанном, он просит вас написать программу,
которая по этой длинной строке и набору допустимых слов определит, можно ли разбить текст на отдельные слова из набора.
Более формально: дан текст T и набор строк s1, ... ,sn. Надо определить, представим ли T как sk1sk2...skr,
где где ki — индексы строк. Индексы могут повторяться. Строка si может встречаться в разбиении текста T произвольное число раз.
Можно использовать не все строки для разбиения. Строки могут идти в любом порядке.
